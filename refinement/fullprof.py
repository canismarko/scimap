# -*- coding: utf-8 -*-

from subprocess import call
import re
import os
import sys
import tempfile
from enum import Enum

import pandas as pd
import jinja2

import plots
from refinement.base import BaseRefinement

class ProfileMatch(BaseRefinement):
    bg_coeffs = [0, 0, 0, 0, 0, 0] # Sixth degree polynomial
    fullprof_path = '/home/mwolf/bin/fullprof'
    zero = 0 # Instrument non-centrality
    displacement = 0.00032 # cos (θ) dependence
    transparency = -0.00810 # sin (θ) dependence

    class Mode(Enum):
        """
        Refinement modes used by fullprof for the Jbt value.
        """
        rietveld = 0
        magnetic = 1
        constant_scale = 2
        constant_intensities = 3

    def calculated_diffractogram(self):
        """Read a pcf file and return the refinement as a dataframe."""
        df = pd.read_csv(self.filename, skiprows=3, sep='\t')
        return df

    def run_fullprof(self, context):
        """Prepare a pcr file and execute the actual fullprof program."""
        # Set environmental variables
        os.environ['FULLPROF'] = self.fullprof_path
        os.environ['PATH'] += os.pathsep + self.fullprof_path
        # Write hkl file if necessary
        if context['refinement_mode'] == self.Mode.constant_scale:
            context['Irf'] = 0 # Reflections generated by FullProf
        else:
            context['Irf'] = 2 # Need to save codefile
            # TODO: Write hkl file
        # Prepare pcr file
        env = jinja2.Environment(loader=jinja2.PackageLoader('electrolab', ''))
        template = env.get_template('refinement/fullprof-template.pcr')
        pcrfilename = self.basename + '.pcr'
        with open(pcrfilename, mode='w') as pcrfile:
            pcrfile.write(template.render(**context))
        # Write datafile
        datafilename = self.basename + '.dat'
        self.scan.save_diffractogram(datafilename)
        # Execute refinement
        with open(os.devnull, 'w') as devnull:
            result = call(['fp2k', pcrfilename], stdout=devnull)
        # Read refined values
        self.load_results()

    def refine_background(self):
        """
        Refine the six background coefficients.
        """
        # Set codewords on background parameters
        context = self.pcrfile_context()
        context['bg_codewords'] = [11, 21, 31, 41, 51, 61]
        # context['bg_codewords'] = [0, 0, 0, 0, 0, 0]
        context['refinement_mode'] = self.Mode.constant_scale
        context['num_params'] = 6
        # Execute refinement
        self.run_fullprof(context=context)
        # Set status flag
        self.is_refined['background'] = True

    def load_results(self, filename=None):
        """
        After a refinement, load the result (.sum) file and restore parameters.
        """
        if filename is None:
            filename = self.basename + '.sum'
        with open(filename) as summaryfile:
            summary = summaryfile.read()
        # Search for final Χ² value
        chi_re = re.compile('Chi2:\s+([0-9.]+)')
        chi_squared = float(chi_re.search(summary).group(1))
        self.chi_squared = chi_squared
        # Search for the background coeffs
        bg_re = re.compile('Background Polynomial Parameters ==>((?:\s+[-0-9.]+)+)')
        bg_results = bg_re.search(summary).group(1).split()
        # Even values are coeffs
        bg_coeffs = [float(x) for x in bg_results[::2]]
        # Odd values are standard deviations
        bg_stdevs = [float(x) for x in bg_results[1::2]]
        self.bg_coeffs = bg_coeffs

    def pcrfile_context(self):
        """Generate a dict of values to put into a pcr input file."""
        context = {}
        context['num_phases'] = len(self.scan.phases)
        phases = []
        for phase in self.scan.phases:
            unitcell = phase.unit_cell
            vals = {
                'a': unitcell.a, 'b': unitcell.b, 'c': unitcell.c,
                'alpha': unitcell.alpha, 'beta': unitcell.beta, 'gamma': unitcell.gamma,
                'u': phase.u, 'v': phase.v, 'w': phase.w,
                'scale': phase.scale_factor, 'eta': phase.eta,
                'Bov': phase.isotropic_temp,
            }
            # Codewords control which parameters are refined and in what order 
            codewords = {
                'a': 0, 'b': 0, 'c': 0,
                'alpha': 0, 'beta': 0, 'gamma': 0,
                'u': 0, 'v': 0, 'w': 0,
                'scale': 0, 'eta': 0
            }
            phases.append({
                'name': 'hello',
                'spacegroup': phase.fullprof_spacegroup,
                'vals': vals,
                'codewords': codewords
            })
        context['phases'] = phases
        # Background corrections
        context['bg_coeffs'] = self.bg_coeffs
        # Instrument corrections
        context['zero'] = self.zero
        context['displacement'] = self.displacement
        context['transparency'] = self.transparency
        return context

    def plot(self, ax=None):
        if ax is None:
            ax = plots.new_axes()
        df = self.calculated_diffractogram()
        ax.plot(df[' 2Theta'], df['Yobs'])
        ax.plot(df[' 2Theta'], df['Ycal'])
        ax.plot(df[' 2Theta'], df['Yobs-Ycal'])
        ax.set_title('Profile refinement {filename}'.format(filename=self.filename))
        ax.set_xlim(
            right=df[' 2Theta'].max()
        )
        return ax
